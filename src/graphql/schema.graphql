### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Job {
  created: Int!
  endTime: DateTime
  id: Int!
  startTime: DateTime!
  user: User!
}

input JobListRelationFilter {
  every: JobWhereInput
  none: JobWhereInput
  some: JobWhereInput
}

input JobOrderByInput {
  created: SortOrder
  createdAt: SortOrder
  endTime: SortOrder
  id: SortOrder
  startTime: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input JobWhereInput {
  AND: [JobWhereInput!]
  created: IntFilter
  createdAt: DateTimeFilter
  endTime: DateTimeNullableFilter
  id: IntFilter
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  startTime: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  user: UserWhereInput
  userId: IntFilter
  waitTimes: WaitTimeListRelationFilter
}

input JobWhereUniqueInput {
  id: Int
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Park {
  id: Int!
  latitude: Float!
  longitude: Float!
  name: String!
  resort: Resort!
  rides(skip: Int): [Ride!]!
  slug: String!
  timezone: String!
}

input ParkListRelationFilter {
  every: ParkWhereInput
  none: ParkWhereInput
  some: ParkWhereInput
}

input ParkOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  name: SortOrder
  resortId: SortOrder
  slug: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
}

input ParkWhereInput {
  AND: [ParkWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  latitude: FloatFilter
  longitude: FloatFilter
  name: StringFilter
  NOT: [ParkWhereInput!]
  OR: [ParkWhereInput!]
  resort: ResortWhereInput
  resortId: IntFilter
  rides: RideListRelationFilter
  slug: StringFilter
  timezone: StringFilter
  updatedAt: DateTimeNullableFilter
}

input ParkWhereUniqueInput {
  id: Int
}

type Query {
  getPark(parkSlug: String, resortSlug: String): Park!
  getResort(resortSlug: String): Resort!
  getRide(parkSlug: String, resortSlug: String, rideSlug: String): Ride!
  job(where: JobWhereUniqueInput!): Job
  jobs(orderBy: [JobOrderByInput!], skip: Int, where: JobWhereInput): [Job!]!
  park(where: ParkWhereUniqueInput!): Park
  parks(orderBy: [ParkOrderByInput!], skip: Int, where: ParkWhereInput): [Park!]!
  resort(where: ResortWhereUniqueInput!): Resort
  resorts(orderBy: [ResortOrderByInput!], skip: Int, where: ResortWhereInput): [Resort!]!
  ride(where: RideWhereUniqueInput!): Ride
  rides(orderBy: [RideOrderByInput!], skip: Int, where: RideWhereInput): [Ride!]!
  user(where: UserWhereUniqueInput!): User
  users(orderBy: [UserOrderByInput!], skip: Int, where: UserWhereInput): [User!]!
  waitTime(where: WaitTimeWhereUniqueInput!): WaitTime
  waitTimes(orderBy: [WaitTimeOrderByInput!], skip: Int, where: WaitTimeWhereInput): [WaitTime!]!
}

type Resort {
  id: Int!
  name: String!
  parks(skip: Int): [Park!]!
  slug: String!
}

input ResortOrderByInput {
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ResortWhereInput {
  AND: [ResortWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [ResortWhereInput!]
  OR: [ResortWhereInput!]
  parks: ParkListRelationFilter
  slug: StringFilter
}

input ResortWhereUniqueInput {
  id: Int
}

type Ride {
  area: String
  category: RideCategory
  duration: Float
  fastPass: Boolean
  heightRestriction: Int
  id: Int!
  latitude: Float
  longId: String
  longitude: Float
  name: String!
  openedOn: DateTime
  park: Park!
  riderSwap: Boolean
  singleRider: Boolean
  slug: String!
  type: RideType
  waitTime: WaitTime
  waitTimes: [WaitTime!]!
}

enum RideCategory {
  ARCADE
  CHARACTER_MEET
  PLAY_AREA
  RIDE
  SHOW_CONTINUOUS
  SHOW_SCHEDULED
  WALKTHROUGH
}

input RideListRelationFilter {
  every: RideWhereInput
  none: RideWhereInput
  some: RideWhereInput
}

input RideOrderByInput {
  area: SortOrder
  category: SortOrder
  createdAt: SortOrder
  duration: SortOrder
  fastPass: SortOrder
  heightRestriction: SortOrder
  id: SortOrder
  latitude: SortOrder
  longId: SortOrder
  longitude: SortOrder
  name: SortOrder
  openedOn: SortOrder
  parkId: SortOrder
  riderSwap: SortOrder
  singleRider: SortOrder
  slug: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum RideType {
  ATTRACTION
  ENTERTAINMENT
}

input RideWhereInput {
  AND: [RideWhereInput!]
  area: StringNullableFilter
  category: RideCategory
  createdAt: DateTimeFilter
  duration: FloatNullableFilter
  fastPass: BoolNullableFilter
  heightRestriction: IntNullableFilter
  id: IntFilter
  latitude: FloatNullableFilter
  longId: StringNullableFilter
  longitude: FloatNullableFilter
  name: StringFilter
  NOT: [RideWhereInput!]
  openedOn: DateTimeNullableFilter
  OR: [RideWhereInput!]
  park: ParkWhereInput
  parkId: IntFilter
  riderSwap: BoolNullableFilter
  singleRider: BoolNullableFilter
  slug: StringFilter
  type: RideType
  updatedAt: DateTimeNullableFilter
  waitTimes: WaitTimeListRelationFilter
}

input RideWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: Int!
  jobs(skip: Int): [Job!]!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  jobs: JobListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  updatedAt: DateTimeNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type WaitTime {
  active: Boolean!
  amount: Int!
  id: Int!
  job: Job!
  ride: Ride
  status: String!
  timestamp: DateTime!
}

input WaitTimeListRelationFilter {
  every: WaitTimeWhereInput
  none: WaitTimeWhereInput
  some: WaitTimeWhereInput
}

input WaitTimeOrderByInput {
  active: SortOrder
  amount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  jobId: SortOrder
  rideId: SortOrder
  status: SortOrder
  timestamp: SortOrder
  updatedAt: SortOrder
}

input WaitTimeWhereInput {
  active: BoolFilter
  amount: IntFilter
  AND: [WaitTimeWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  job: JobWhereInput
  jobId: IntFilter
  NOT: [WaitTimeWhereInput!]
  OR: [WaitTimeWhereInput!]
  ride: RideWhereInput
  rideId: IntNullableFilter
  status: StringFilter
  timestamp: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input WaitTimeWhereUniqueInput {
  id: Int
}
