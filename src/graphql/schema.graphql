### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Job {
  created: Int!
  endTime: DateTime
  id: Int!
  startTime: DateTime!
  user: User!
}

input JobFilter {
  every: JobWhereInput
  none: JobWhereInput
  some: JobWhereInput
}

input JobOrderByInput {
  created: OrderByArg
  createdAt: OrderByArg
  endTime: OrderByArg
  id: OrderByArg
  startTime: OrderByArg
  updatedAt: OrderByArg
  userId: OrderByArg
}

input JobWhereInput {
  AND: [JobWhereInput!]
  created: IntFilter
  createdAt: DateTimeFilter
  endTime: NullableDateTimeFilter
  id: IntFilter
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  startTime: DateTimeFilter
  updatedAt: NullableDateTimeFilter
  user: UserWhereInput
  userId: IntFilter
  waitTimes: WaitTimeFilter
}

input JobWhereUniqueInput {
  id: Int
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Park {
  id: Int!
  latitude: Float!
  longitude: Float!
  name: String!
  resort: Resort!
  rides(skip: Int): [Ride!]!
  slug: String!
  timezone: String!
}

input ParkFilter {
  every: ParkWhereInput
  none: ParkWhereInput
  some: ParkWhereInput
}

input ParkOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  latitude: OrderByArg
  longitude: OrderByArg
  name: OrderByArg
  resortId: OrderByArg
  slug: OrderByArg
  timezone: OrderByArg
  updatedAt: OrderByArg
}

input ParkWhereInput {
  AND: [ParkWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  latitude: FloatFilter
  longitude: FloatFilter
  name: StringFilter
  NOT: [ParkWhereInput!]
  OR: [ParkWhereInput!]
  resort: ResortWhereInput
  resortId: IntFilter
  rides: RideFilter
  slug: StringFilter
  timezone: StringFilter
  updatedAt: NullableDateTimeFilter
}

input ParkWhereUniqueInput {
  id: Int
}

type Query {
  job(where: JobWhereUniqueInput!): Job
  jobs(orderBy: JobOrderByInput, skip: Int, where: JobWhereInput): [Job!]!
  park(where: ParkWhereUniqueInput!): Park
  parks(orderBy: ParkOrderByInput, skip: Int, where: ParkWhereInput): [Park!]!
  resort(where: ResortWhereUniqueInput!): Resort
  resorts(orderBy: ResortOrderByInput, skip: Int, where: ResortWhereInput): [Resort!]!
  ride(where: RideWhereUniqueInput!): Ride
  rides(orderBy: RideOrderByInput, skip: Int, where: RideWhereInput): [Ride!]!
  user(where: UserWhereUniqueInput!): User
  users(orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  waitTime(where: WaitTimeWhereUniqueInput!): WaitTime
  waitTimes(orderBy: WaitTimeOrderByInput, skip: Int, where: WaitTimeWhereInput): [WaitTime!]!
}

type Resort {
  id: Int!
  name: String!
  parks(skip: Int): [Park!]!
  slug: String!
}

input ResortOrderByInput {
  id: OrderByArg
  name: OrderByArg
  slug: OrderByArg
}

input ResortWhereInput {
  AND: [ResortWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [ResortWhereInput!]
  OR: [ResortWhereInput!]
  parks: ParkFilter
  slug: StringFilter
}

input ResortWhereUniqueInput {
  id: Int
}

type Ride {
  area: String
  category: RideCategory
  duration: Float
  fastPass: Boolean
  heightRestriction: Int
  id: Int!
  latitude: Float
  longId: String
  longitude: Float
  name: String!
  openedOn: DateTime
  park: Park!
  riderSwap: Boolean
  singleRider: Boolean
  slug: String!
  type: RideType
  waitTime: [WaitTime!]!
  waitTimes: [WaitTime!]!
}

enum RideCategory {
  ARCADE
  CHARACTER_MEET
  PLAY_AREA
  RIDE
  SHOW_CONTINUOUS
  SHOW_SCHEDULED
  WALKTHROUGH
}

input RideFilter {
  every: RideWhereInput
  none: RideWhereInput
  some: RideWhereInput
}

input RideOrderByInput {
  area: OrderByArg
  category: OrderByArg
  createdAt: OrderByArg
  duration: OrderByArg
  fastPass: OrderByArg
  heightRestriction: OrderByArg
  id: OrderByArg
  latitude: OrderByArg
  longId: OrderByArg
  longitude: OrderByArg
  name: OrderByArg
  openedOn: OrderByArg
  parkId: OrderByArg
  riderSwap: OrderByArg
  singleRider: OrderByArg
  slug: OrderByArg
  type: OrderByArg
  updatedAt: OrderByArg
}

enum RideType {
  ATTRACTION
  ENTERTAINMENT
}

input RideWhereInput {
  AND: [RideWhereInput!]
  area: NullableStringFilter
  category: RideCategory
  createdAt: DateTimeFilter
  duration: NullableFloatFilter
  fastPass: NullableBooleanFilter
  heightRestriction: NullableIntFilter
  id: IntFilter
  latitude: NullableFloatFilter
  longId: NullableStringFilter
  longitude: NullableFloatFilter
  name: StringFilter
  NOT: [RideWhereInput!]
  openedOn: NullableDateTimeFilter
  OR: [RideWhereInput!]
  park: ParkWhereInput
  parkId: IntFilter
  riderSwap: NullableBooleanFilter
  singleRider: NullableBooleanFilter
  slug: StringFilter
  type: RideType
  updatedAt: NullableDateTimeFilter
  waitTimes: WaitTimeFilter
}

input RideWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: Int!
  jobs(skip: Int): [Job!]!
}

input UserOrderByInput {
  createdAt: OrderByArg
  email: OrderByArg
  id: OrderByArg
  password: OrderByArg
  updatedAt: OrderByArg
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  jobs: JobFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  updatedAt: NullableDateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type WaitTime {
  active: Boolean!
  amount: Int!
  id: Int!
  job: Job!
  ride: Ride
  status: String!
  timestamp: DateTime!
}

input WaitTimeFilter {
  every: WaitTimeWhereInput
  none: WaitTimeWhereInput
  some: WaitTimeWhereInput
}

input WaitTimeOrderByInput {
  active: OrderByArg
  amount: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  jobId: OrderByArg
  rideId: OrderByArg
  status: OrderByArg
  timestamp: OrderByArg
  updatedAt: OrderByArg
}

input WaitTimeWhereInput {
  active: BooleanFilter
  amount: IntFilter
  AND: [WaitTimeWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  job: JobWhereInput
  jobId: IntFilter
  NOT: [WaitTimeWhereInput!]
  OR: [WaitTimeWhereInput!]
  ride: RideWhereInput
  rideId: NullableIntFilter
  status: StringFilter
  timestamp: DateTimeFilter
  updatedAt: NullableDateTimeFilter
}

input WaitTimeWhereUniqueInput {
  id: Int
}
