### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Job {
  created: Int!
  endTime: DateTime
  id: Int!
  startTime: DateTime!
  user: User!
}

input JobWhereUniqueInput {
  id: Int
}

type Park {
  abbreviation: String!
  id: Int!
  latitude: Float!
  longitude: Float!
  name: String!
  resort: Resort!
  rides(after: RideWhereUniqueInput, before: RideWhereUniqueInput, first: Int, last: Int): [Ride!]!
  slug: String!
  timezone: String!
}

input ParkWhereUniqueInput {
  id: Int
}

type Query {
  getPark(parkSlug: String, resortSlug: String): Park
  getResort(resortSlug: String): Resort
  getRide(parkSlug: String, resortSlug: String, rideSlug: String): Ride
}

type Resort {
  abbreviation: String!
  id: Int!
  name: String!
  parks(after: ParkWhereUniqueInput, before: ParkWhereUniqueInput, first: Int, last: Int): [Park!]!
  slug: String!
}

type Ride {
  area: String
  category: RideCategory
  duration: Float
  fastPass: Boolean
  heightRestriction: Int
  id: Int!
  latitude: Float
  longId: String
  longitude: Float
  name: String!
  openedOn: DateTime
  park: Park!
  riderSwap: Boolean
  singleRider: Boolean
  slug: String!
  type: RideType
  waitTime: WaitTime
  waitTimes: [WaitTime]
}

enum RideCategory {
  ARCADE
  CHARACTER_MEET
  PLAY_AREA
  RIDE
  SHOW_CONTINUOUS
  SHOW_SCHEDULED
  WALKTHROUGH
}

enum RideType {
  ATTRACTION
  ENTERTAINMENT
}

input RideWhereUniqueInput {
  id: Int
}

type User {
  email: String!
  id: Int!
  jobs(after: JobWhereUniqueInput, before: JobWhereUniqueInput, first: Int, last: Int): [Job!]!
}

type WaitTime {
  active: Boolean!
  amount: Int!
  id: Int!
  job: Job!
  ride: Ride
  status: String!
  timestamp: DateTime!
}
