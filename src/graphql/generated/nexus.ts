/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  JobWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  ParkWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  RideWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
  RideCategory: "ARCADE" | "CHARACTER_MEET" | "PLAY_AREA" | "RIDE" | "SHOW_CONTINUOUS" | "SHOW_SCHEDULED" | "WALKTHROUGH"
  RideType: "ATTRACTION" | "ENTERTAINMENT"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Job: { // root type
    created: number; // Int!
    endTime?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    startTime: NexusGenScalars['DateTime']; // DateTime!
  }
  Park: { // root type
    abbreviation: string; // String!
    id: number; // Int!
    latitude: number; // Float!
    longitude: number; // Float!
    name: string; // String!
    slug: string; // String!
    timezone: string; // String!
  }
  Query: {};
  Resort: { // root type
    abbreviation: string; // String!
    id: number; // Int!
    name: string; // String!
    slug: string; // String!
  }
  Ride: { // root type
    area?: string | null; // String
    category?: NexusGenEnums['RideCategory'] | null; // RideCategory
    duration?: number | null; // Float
    fastPass?: boolean | null; // Boolean
    heightRestriction?: number | null; // Int
    id: number; // Int!
    latitude?: number | null; // Float
    longId?: string | null; // String
    longitude?: number | null; // Float
    name: string; // String!
    openedOn?: NexusGenScalars['DateTime'] | null; // DateTime
    riderSwap?: boolean | null; // Boolean
    singleRider?: boolean | null; // Boolean
    slug: string; // String!
    type?: NexusGenEnums['RideType'] | null; // RideType
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
  }
  WaitTime: { // root type
    active: boolean; // Boolean!
    amount: number; // Int!
    id: number; // Int!
    status: string; // String!
    timestamp: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Job: { // field return type
    created: number; // Int!
    endTime: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
  }
  Park: { // field return type
    abbreviation: string; // String!
    id: number; // Int!
    latitude: number; // Float!
    longitude: number; // Float!
    name: string; // String!
    resort: NexusGenRootTypes['Resort']; // Resort!
    rides: NexusGenRootTypes['Ride'][]; // [Ride!]!
    slug: string; // String!
    timezone: string; // String!
  }
  Query: { // field return type
    getPark: NexusGenRootTypes['Park'] | null; // Park
    getResort: NexusGenRootTypes['Resort'] | null; // Resort
    getRide: NexusGenRootTypes['Ride'] | null; // Ride
  }
  Resort: { // field return type
    abbreviation: string; // String!
    id: number; // Int!
    name: string; // String!
    parks: NexusGenRootTypes['Park'][]; // [Park!]!
    slug: string; // String!
  }
  Ride: { // field return type
    area: string | null; // String
    category: NexusGenEnums['RideCategory'] | null; // RideCategory
    duration: number | null; // Float
    fastPass: boolean | null; // Boolean
    heightRestriction: number | null; // Int
    id: number; // Int!
    latitude: number | null; // Float
    longId: string | null; // String
    longitude: number | null; // Float
    name: string; // String!
    openedOn: NexusGenScalars['DateTime'] | null; // DateTime
    park: NexusGenRootTypes['Park']; // Park!
    riderSwap: boolean | null; // Boolean
    singleRider: boolean | null; // Boolean
    slug: string; // String!
    type: NexusGenEnums['RideType'] | null; // RideType
    waitTime: NexusGenRootTypes['WaitTime'] | null; // WaitTime
    waitTimes: Array<NexusGenRootTypes['WaitTime'] | null> | null; // [WaitTime]
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    jobs: NexusGenRootTypes['Job'][]; // [Job!]!
  }
  WaitTime: { // field return type
    active: boolean; // Boolean!
    amount: number; // Int!
    id: number; // Int!
    job: NexusGenRootTypes['Job']; // Job!
    ride: NexusGenRootTypes['Ride'] | null; // Ride
    status: string; // String!
    timestamp: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Job: { // field return type name
    created: 'Int'
    endTime: 'DateTime'
    id: 'Int'
    startTime: 'DateTime'
    user: 'User'
  }
  Park: { // field return type name
    abbreviation: 'String'
    id: 'Int'
    latitude: 'Float'
    longitude: 'Float'
    name: 'String'
    resort: 'Resort'
    rides: 'Ride'
    slug: 'String'
    timezone: 'String'
  }
  Query: { // field return type name
    getPark: 'Park'
    getResort: 'Resort'
    getRide: 'Ride'
  }
  Resort: { // field return type name
    abbreviation: 'String'
    id: 'Int'
    name: 'String'
    parks: 'Park'
    slug: 'String'
  }
  Ride: { // field return type name
    area: 'String'
    category: 'RideCategory'
    duration: 'Float'
    fastPass: 'Boolean'
    heightRestriction: 'Int'
    id: 'Int'
    latitude: 'Float'
    longId: 'String'
    longitude: 'Float'
    name: 'String'
    openedOn: 'DateTime'
    park: 'Park'
    riderSwap: 'Boolean'
    singleRider: 'Boolean'
    slug: 'String'
    type: 'RideType'
    waitTime: 'WaitTime'
    waitTimes: 'WaitTime'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    jobs: 'Job'
  }
  WaitTime: { // field return type name
    active: 'Boolean'
    amount: 'Int'
    id: 'Int'
    job: 'Job'
    ride: 'Ride'
    status: 'String'
    timestamp: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Park: {
    rides: { // args
      after?: NexusGenInputs['RideWhereUniqueInput'] | null; // RideWhereUniqueInput
      before?: NexusGenInputs['RideWhereUniqueInput'] | null; // RideWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    getPark: { // args
      parkSlug?: string | null; // String
      resortSlug?: string | null; // String
    }
    getResort: { // args
      resortSlug?: string | null; // String
    }
    getRide: { // args
      parkSlug?: string | null; // String
      resortSlug?: string | null; // String
      rideSlug?: string | null; // String
    }
  }
  Resort: {
    parks: { // args
      after?: NexusGenInputs['ParkWhereUniqueInput'] | null; // ParkWhereUniqueInput
      before?: NexusGenInputs['ParkWhereUniqueInput'] | null; // ParkWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  User: {
    jobs: { // args
      after?: NexusGenInputs['JobWhereUniqueInput'] | null; // JobWhereUniqueInput
      before?: NexusGenInputs['JobWhereUniqueInput'] | null; // JobWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}