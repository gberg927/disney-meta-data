### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

scalar Decimal

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input EnumRide_categoryNullableFilter {
  equals: Ride_category
  in: [Ride_category!]
  not: NestedEnumRide_categoryNullableFilter
  notIn: [Ride_category!]
}

input EnumRide_typeNullableFilter {
  equals: Ride_type
  in: [Ride_type!]
  not: NestedEnumRide_typeNullableFilter
  notIn: [Ride_type!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Job {
  created: Int!
  endTime: DateTime
  id: Int!
  startTime: DateTime!
  user: User!
  waitTimes: [WaitTime]
}

input JobListRelationFilter {
  every: JobWhereInput
  none: JobWhereInput
  some: JobWhereInput
}

input JobOrderByInput {
  created: SortOrder
  createdAt: SortOrder
  endTime: SortOrder
  id: SortOrder
  startTime: SortOrder
  updatedAt: SortOrder
  user: UserOrderByInput
  userId: SortOrder
}

input JobWhereInput {
  AND: [JobWhereInput!]
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  created: IntFilter
  createdAt: DateTimeFilter
  endTime: DateTimeNullableFilter
  id: IntFilter
  startTime: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  user: UserWhereInput
  userId: IntFilter
  waitTimes: WaitTimeListRelationFilter
}

input JobWhereUniqueInput {
  id: Int
}

input LoginInput {
  email: String!
  password: String!
}

type LogoutPayload {
  message: String!
}

type Mutation {
  login(data: LoginInput!): User!
  logout: LogoutPayload!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input NestedEnumRide_categoryNullableFilter {
  equals: Ride_category
  in: [Ride_category!]
  not: NestedEnumRide_categoryNullableFilter
  notIn: [Ride_category!]
}

input NestedEnumRide_typeNullableFilter {
  equals: Ride_type
  in: [Ride_type!]
  not: NestedEnumRide_typeNullableFilter
  notIn: [Ride_type!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Park {
  abbreviation: String!
  id: Int!
  latitude: Decimal!
  longitude: Decimal!
  name: String!
  resort: Resort!
  rides(after: RideWhereUniqueInput, before: RideWhereUniqueInput, first: Int, last: Int): [Ride!]!
  slug: String!
  timezone: String!
}

input ParkListRelationFilter {
  every: ParkWhereInput
  none: ParkWhereInput
  some: ParkWhereInput
}

input ParkOrderByInput {
  abbreviation: SortOrder
  createdAt: SortOrder
  id: SortOrder
  latitude: SortOrder
  longId: SortOrder
  longitude: SortOrder
  name: SortOrder
  resort: ResortOrderByInput
  resortId: SortOrder
  slug: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
}

input ParkWhereInput {
  AND: [ParkWhereInput!]
  NOT: [ParkWhereInput!]
  OR: [ParkWhereInput!]
  abbreviation: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  latitude: DecimalFilter
  longId: StringFilter
  longitude: DecimalFilter
  name: StringFilter
  resort: ResortWhereInput
  resortId: IntFilter
  rides: RideListRelationFilter
  slug: StringFilter
  timezone: StringFilter
  updatedAt: DateTimeNullableFilter
}

input ParkWhereUniqueInput {
  id: Int
}

type Query {
  currentUser: User
  getPark(parkSlug: String, resortSlug: String): Park
  getResort(resortSlug: String): Resort
  getRide(parkSlug: String, resortSlug: String, rideSlug: String): Ride
  job(where: JobWhereUniqueInput!): Job
  jobs(after: JobWhereUniqueInput, before: JobWhereUniqueInput, first: Int, last: Int, orderBy: [JobOrderByInput!], where: JobWhereInput): [Job!]!
  park(where: ParkWhereUniqueInput!): Park
  parks(after: ParkWhereUniqueInput, before: ParkWhereUniqueInput, first: Int, last: Int, orderBy: [ParkOrderByInput!], where: ParkWhereInput): [Park!]!
  resort(where: ResortWhereUniqueInput!): Resort
  resorts(after: ResortWhereUniqueInput, before: ResortWhereUniqueInput, first: Int, last: Int, orderBy: [ResortOrderByInput!], where: ResortWhereInput): [Resort!]!
  ride(where: RideWhereUniqueInput!): Ride
  rides(after: RideWhereUniqueInput, before: RideWhereUniqueInput, first: Int, last: Int, orderBy: [RideOrderByInput!], where: RideWhereInput): [Ride!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

type Resort {
  abbreviation: String!
  id: Int!
  name: String!
  parks(after: ParkWhereUniqueInput, before: ParkWhereUniqueInput, first: Int, last: Int): [Park!]!
  slug: String!
}

input ResortOrderByInput {
  abbreviation: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ResortWhereInput {
  AND: [ResortWhereInput!]
  NOT: [ResortWhereInput!]
  OR: [ResortWhereInput!]
  abbreviation: StringFilter
  id: IntFilter
  name: StringFilter
  parks: ParkListRelationFilter
  slug: StringFilter
}

input ResortWhereUniqueInput {
  id: Int
}

type Ride {
  area: String
  category: Ride_category
  duration: Decimal
  fastPass: Boolean
  heightRestriction: Int
  id: Int!
  latitude: Decimal
  longId: String
  longitude: Decimal
  name: String!
  openedOn: DateTime
  park: Park!
  riderSwap: Boolean
  singleRider: Boolean
  slug: String!
  type: Ride_type
  waitTime: WaitTime
  waitTimes: [WaitTime]
}

input RideListRelationFilter {
  every: RideWhereInput
  none: RideWhereInput
  some: RideWhereInput
}

input RideOrderByInput {
  area: SortOrder
  category: SortOrder
  createdAt: SortOrder
  duration: SortOrder
  fastPass: SortOrder
  heightRestriction: SortOrder
  id: SortOrder
  latitude: SortOrder
  longId: SortOrder
  longitude: SortOrder
  name: SortOrder
  openedOn: SortOrder
  park: ParkOrderByInput
  parkId: SortOrder
  riderSwap: SortOrder
  singleRider: SortOrder
  slug: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input RideWhereInput {
  AND: [RideWhereInput!]
  NOT: [RideWhereInput!]
  OR: [RideWhereInput!]
  area: StringNullableFilter
  category: EnumRide_categoryNullableFilter
  createdAt: DateTimeFilter
  duration: DecimalNullableFilter
  fastPass: BoolNullableFilter
  heightRestriction: IntNullableFilter
  id: IntFilter
  latitude: DecimalNullableFilter
  longId: StringNullableFilter
  longitude: DecimalNullableFilter
  name: StringFilter
  openedOn: DateTimeNullableFilter
  park: ParkWhereInput
  parkId: IntFilter
  riderSwap: BoolNullableFilter
  singleRider: BoolNullableFilter
  slug: StringFilter
  type: EnumRide_typeNullableFilter
  updatedAt: DateTimeNullableFilter
  waitTimes: WaitTimeListRelationFilter
}

input RideWhereUniqueInput {
  id: Int
}

enum Ride_category {
  ARCADE
  CHARACTER_MEET
  PLAY_AREA
  RIDE
  SHOW_CONTINUOUS
  SHOW_SCHEDULED
  WALKTHROUGH
}

enum Ride_type {
  ATTRACTION
  ENTERTAINMENT
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: Int!
  jobs(after: JobWhereUniqueInput, before: JobWhereUniqueInput, first: Int, last: Int): [Job!]!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  jobs: JobListRelationFilter
  password: StringFilter
  updatedAt: DateTimeNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type WaitTime {
  active: Boolean!
  amount: Int!
  parkIdId: Int!
  resortId: Int!
  rideIdId: Int!
  status: String!
  timestamp: DateTime!
}

input WaitTimeListRelationFilter {
  every: WaitTimeWhereInput
  none: WaitTimeWhereInput
  some: WaitTimeWhereInput
}

input WaitTimeWhereInput {
  AND: [WaitTimeWhereInput!]
  NOT: [WaitTimeWhereInput!]
  OR: [WaitTimeWhereInput!]
  active: BoolFilter
  amount: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  job: JobWhereInput
  jobId: IntFilter
  ride: RideWhereInput
  rideId: IntNullableFilter
  status: StringFilter
  timestamp: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}
